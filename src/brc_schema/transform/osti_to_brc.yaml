id: https://w3id.org/brc/osti_to_brc
title: osti_to_brc
source_schema: osti_schema
target_schema: brc_schema

class_derivations:
  DatasetCollection:
    populated_from: records
    slot_derivations:
      datasets:
        populated_from: records

  Dataset:
    populated_from: Record
    slot_derivations:
      brc:
        expr: |
          # Map DOE contract numbers to BRC values
          # Check multiple possible locations for the contract number
          contract_map = {
            'SC0018420': 'CABBI',
            'SC0018409': 'GLBRC',
            'AC36-08GO28308': 'CBI',
            'AC02-05CH11231': 'JBEI'
          }
          
          contract_num = None
          
          # Check doe_contract_number field (deprecated but may be present)
          if src.doe_contract_number:
            contract_num = src.doe_contract_number
          # Check contract_number field (deprecated but may be present)
          elif src.contract_number:
            contract_num = src.contract_number
          # Check identifiers list for CN_DOE type
          elif src.identifiers:
            for identifier in src.identifiers:
              if identifier.type == 'CN_DOE':
                contract_num = identifier.value
                break
          
          # Map to BRC value if found in our mapping
          target = contract_map.get(contract_num, None) if contract_num else None
      title:
        populated_from: title
      description:
        populated_from: description
      date:
        populated_from: publication_date
      identifier:
        expr: "'https://www.osti.gov/biblio/' + osti_id"
      bibliographicCitation:
        expr: |
          if src.doi:
            target = 'https://doi.org/' + src.doi
          else:
            target = None
      keywords:
        populated_from: keywords
      creator:
        expr: |
          if src.persons:
            # Use Person objects with type AUTHOR
            target = [p for p in src.persons if p.type == 'AUTHOR']
          elif src.authors:
            # Coerce string list to Individual objects
            target = [{'name': author, 'primaryContact': False} for author in src.authors]
            # Set first author as primary contact if available
            if target:
              target[0]['primaryContact'] = True
          else:
            target = None
      contributors:
        expr: |
          if src.persons:
            # Use Person objects with type CONTRIBUTING
            target = [p for p in src.persons if p.type == 'CONTRIBUTING']
          else:
            target = None
      funding:
        expr: |
          if src.organizations:
            target = [org for org in src.organizations if org.type == 'SPONSOR']
          else:
            target = None
      relatedItem:
        populated_from: related_identifiers
      #datasetType:
      #  populated_from: product_type
      dataset_url:
        populated_from: site_url

  Individual:
    populated_from: Person
    slot_derivations:
      name:
        expr: |
          if src.middle_name:
            target = src.first_name + ' ' + src.middle_name + ' ' + src.last_name
          else:
            target = src.first_name + ' ' + src.last_name
      email:
        expr: |
          if src.email and len(src.email) > 0:
            target = src.email[0]
          else:
            target = None
      primaryContact:
        expr: "src.type == 'AUTHOR'"
      affiliation:
        populated_from: affiliations
      orcid:
        populated_from: orcid

  Contributor:
    populated_from: Person
    slot_derivations:
      name:
        expr: |
          if src.middle_name:
            target = src.first_name + ' ' + src.middle_name + ' ' + src.last_name
          else:
            target = src.first_name + ' ' + src.last_name
      email:
        expr: |
          if src.email and len(src.email) > 0:
            target = src.email[0]
          else:
            target = None
      affiliation:
        populated_from: affiliations
      orcid:
        populated_from: orcid
      contributorType:
        populated_from: contributor_type

  BRCOrganization:
    populated_from: Affiliation
    slot_derivations:
      organizationName:
        populated_from: name
      ror_id:
        populated_from: ror_id

  Funding:
    populated_from: Organization
    slot_derivations:
      fundingOrganization:
        expr: |
          # Create a BRCOrganization from the Organization
          target = {'organizationName': src.name}
          if src.ror_id:
            target['ror_id'] = src.ror_id
      awardNumber:
        expr: |
          if src.identifiers:
            # Extract award numbers from identifiers
            awards = [id.value for id in src.identifiers if id.type in ['AWARD_DOI', 'CN_DOE', 'CN_NONDOE']]
            target = awards[0] if awards else None
          else:
            target = None
      awardTitle:
        expr: "None"
      awardURI:
        expr: |
          if src.identifiers:
            # Extract DOI awards and format as URI
            dois = [id.value for id in src.identifiers if id.type == 'AWARD_DOI']
            target = 'doi:' + dois[0] if dois else None
          else:
            target = None

  RelatedItem:
    populated_from: RelatedIdentifier
    slot_derivations:
      title:
        expr: "None"
      relatedItemIdentifier:
        populated_from: value
      relatedItemType:
        expr: |
          # Map OSTI identifier types to BRC CitedItemType
          # This is a basic mapping; may need refinement
          type_map = {
            'DOI': 'JournalArticle',
            'URL': 'Webpage',
            'URI': 'Webpage',
            'arXiv': 'Preprint',
            'ISBN': 'Book'
          }
          target = type_map.get(src.type, None)