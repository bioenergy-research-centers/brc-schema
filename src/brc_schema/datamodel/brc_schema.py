# Auto generated from brc_schema.yaml by pythongen.py version: 0.0.1
# Generation date: 2025-02-27T15:10:23
# Schema: brc_schema
#
# id: https://w3id.org/brc/brc_schema
# description: This schema defines the structure for biomolecular and -omics datasets, capturing essential metadata including investigators, affiliations, data citation, organism details, analysis type, and more. These are datasets generated by the Bioenergy Research Centers (BRCs), including CABBI, CBI, GLBRC, and JBEI.
# license: https://creativecommons.org/publicdomain/zero/1.0/

import dataclasses
import re
from dataclasses import dataclass
from datetime import (
    date,
    datetime,
    time
)
from typing import (
    Any,
    ClassVar,
    Dict,
    List,
    Optional,
    Union
)

from jsonasobj2 import (
    JsonObj,
    as_dict
)
from linkml_runtime.linkml_model.meta import (
    EnumDefinition,
    PermissibleValue,
    PvFormulaOptions
)
from linkml_runtime.utils.curienamespace import CurieNamespace
from linkml_runtime.utils.dataclass_extensions_376 import dataclasses_init_fn_with_kwargs
from linkml_runtime.utils.enumerations import EnumDefinitionImpl
from linkml_runtime.utils.formatutils import (
    camelcase,
    sfx,
    underscore
)
from linkml_runtime.utils.metamodelcore import (
    bnode,
    empty_dict,
    empty_list
)
from linkml_runtime.utils.slot import Slot
from linkml_runtime.utils.yamlutils import (
    YAMLRoot,
    extended_float,
    extended_int,
    extended_str
)
from rdflib import (
    Namespace,
    URIRef
)

from linkml_runtime.linkml_model.types import Boolean, Date, Integer, String, Uri, Uriorcurie
from linkml_runtime.utils.metamodelcore import Bool, URI, URIorCURIE, XSDDate

metamodel_version = "1.7.0"
version = "0.1.0"

# Overwrite dataclasses _init_fn to add **kwargs in __init__
dataclasses._init_fn = dataclasses_init_fn_with_kwargs

# Namespaces
BIOPROJECT = CurieNamespace('BIOPROJECT', 'https://www.ncbi.nlm.nih.gov/bioproject/?term=')
BIOSAMPLE = CurieNamespace('BIOSAMPLE', 'http://www.ncbi.nlm.nih.gov/biosample?term=')
ERO = CurieNamespace('ERO', 'http://purl.obolibrary.org/obo/ERO_')
IAO = CurieNamespace('IAO', 'http://purl.obolibrary.org/obo/IAO_')
INSDC_SRA = CurieNamespace('INSDC_SRA', 'https://www.ncbi.nlm.nih.gov/sra/')
MI = CurieNamespace('MI', 'http://purl.obolibrary.org/obo/MI_')
NCIT = CurieNamespace('NCIT', 'http://purl.obolibrary.org/obo/NCIT_')
OBI = CurieNamespace('OBI', 'http://purl.obolibrary.org/obo/OBI_')
SIO = CurieNamespace('SIO', 'http://identifiers.org/sio/')
UO = CurieNamespace('UO', 'http://purl.obolibrary.org/obo/UO_')
BALD = CurieNamespace('bald', 'https://www.opengis.net/def/binary-array-ld/')
BIBO = CurieNamespace('bibo', 'http://purl.org/ontology/bibo/')
BRC = CurieNamespace('brc', 'https://w3id.org/brc/')
CABBI = CurieNamespace('cabbi', 'https://cabbitools.igb.illinois.edu/brc/')
CBI = CurieNamespace('cbi', 'https://fair.ornl.gov/CBI/')
DCAT = CurieNamespace('dcat', 'http://www.w3.org/ns/dcat#')
DCTERMS = CurieNamespace('dcterms', 'http://purl.org/dc/terms/')
EDAM = CurieNamespace('edam', 'http://edamontology.org/')
GLBRC = CurieNamespace('glbrc', 'https://fair-data.glbrc.org/')
JBEI = CurieNamespace('jbei', 'https://hello.bioenergy.org/JBEI/')
LINKML = CurieNamespace('linkml', 'https://w3id.org/linkml/')
OSLC = CurieNamespace('oslc', 'http://open-services.net/ns/core#')
OSTI = CurieNamespace('osti', 'https://www.osti.gov/biblio/')
PAV = CurieNamespace('pav', 'http://purl.org/pav/')
PROV = CurieNamespace('prov', 'http://www.w3.org/ns/prov#')
ROR = CurieNamespace('ror', 'https://ror.org/')
SCHEMA = CurieNamespace('schema', 'http://schema.org/')
SKOS = CurieNamespace('skos', 'http://www.w3.org/2004/02/skos/core#')
VOID = CurieNamespace('void', 'http://rdfs.org/ns/void#')
WIKIDATA = CurieNamespace('wikidata', 'https://www.wikidata.org/wiki/')
XSD = CurieNamespace('xsd', 'http://www.w3.org/2001/XMLSchema#')
DEFAULT_ = BRC


# Types
class RorIdentifier(Uriorcurie):
    """ Identifier from Research Organization Registry. """
    type_class_uri = XSD["anyURI"]
    type_class_curie = "xsd:anyURI"
    type_name = "ror_identifier"
    type_model_uri = BRC.RorIdentifier


class WikidataIdentifier(Uriorcurie):
    """ Identifier from Wikidata open knowledge base. """
    type_class_uri = XSD["anyURI"]
    type_class_curie = "xsd:anyURI"
    type_name = "wikidata_identifier"
    type_model_uri = BRC.WikidataIdentifier


# Class references



@dataclass(repr=False)
class DatasetCollection(YAMLRoot):
    """
    Container class for defining a collection of datasets.
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = BRC["DatasetCollection"]
    class_class_curie: ClassVar[str] = "brc:DatasetCollection"
    class_name: ClassVar[str] = "DatasetCollection"
    class_model_uri: ClassVar[URIRef] = BRC.DatasetCollection

    datasets: Optional[Union[Union[dict, "Dataset"], List[Union[dict, "Dataset"]]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if not isinstance(self.datasets, list):
            self.datasets = [self.datasets] if self.datasets is not None else []
        self.datasets = [v if isinstance(v, Dataset) else Dataset(**as_dict(v)) for v in self.datasets]

        super().__post_init__(**kwargs)


@dataclass(repr=False)
class Dataset(YAMLRoot):
    """
    A dataset containing metabolomics and proteomics data.
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = SCHEMA["Dataset"]
    class_class_curie: ClassVar[str] = "schema:Dataset"
    class_name: ClassVar[str] = "Dataset"
    class_model_uri: ClassVar[URIRef] = BRC.Dataset

    title: str = None
    date: Union[str, XSDDate] = None
    creator: Union[Union[dict, "Individual"], List[Union[dict, "Individual"]]] = None
    brc: Union[str, "BRCEnum"] = None
    identifier: str = None
    id: Optional[Union[str, URIorCURIE]] = None
    contributors: Optional[Union[Union[dict, "Contributor"], List[Union[dict, "Contributor"]]]] = empty_list()
    additional_brcs: Optional[Union[Union[str, "BRCEnum"], List[Union[str, "BRCEnum"]]]] = empty_list()
    repository: Optional[Union[str, "RepositoryEnum"]] = None
    bibliographicCitation: Optional[Union[str, URI]] = None
    has_related_ids: Optional[Union[Union[str, URIorCURIE], List[Union[str, URIorCURIE]]]] = empty_list()
    species: Optional[Union[Union[dict, "Organism"], List[Union[dict, "Organism"]]]] = empty_list()
    plasmid_features: Optional[Union[Union[dict, "Plasmid"], List[Union[dict, "Plasmid"]]]] = empty_list()
    analysisType: Optional[str] = "not specified"
    datasetType: Optional[Union[str, "DatasetTypeCodes"]] = None
    description: Optional[str] = None
    relatedItem: Optional[Union[Union[dict, "RelatedItem"], List[Union[dict, "RelatedItem"]]]] = empty_list()
    keywords: Optional[Union[str, List[str]]] = empty_list()
    datasetName: Optional[str] = None
    funding: Optional[Union[Union[dict, "Funding"], List[Union[dict, "Funding"]]]] = empty_list()
    dataset_url: Optional[Union[str, URI]] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.title):
            self.MissingRequiredField("title")
        if not isinstance(self.title, str):
            self.title = str(self.title)

        if self._is_empty(self.date):
            self.MissingRequiredField("date")
        if not isinstance(self.date, XSDDate):
            self.date = XSDDate(self.date)

        if self._is_empty(self.creator):
            self.MissingRequiredField("creator")
        if not isinstance(self.creator, list):
            self.creator = [self.creator] if self.creator is not None else []
        self.creator = [v if isinstance(v, Individual) else Individual(**as_dict(v)) for v in self.creator]

        if self._is_empty(self.brc):
            self.MissingRequiredField("brc")
        if not isinstance(self.brc, BRCEnum):
            self.brc = BRCEnum(self.brc)

        if self._is_empty(self.identifier):
            self.MissingRequiredField("identifier")
        if not isinstance(self.identifier, str):
            self.identifier = str(self.identifier)

        if self.id is not None and not isinstance(self.id, URIorCURIE):
            self.id = URIorCURIE(self.id)

        if not isinstance(self.contributors, list):
            self.contributors = [self.contributors] if self.contributors is not None else []
        self.contributors = [v if isinstance(v, Contributor) else Contributor(**as_dict(v)) for v in self.contributors]

        if not isinstance(self.additional_brcs, list):
            self.additional_brcs = [self.additional_brcs] if self.additional_brcs is not None else []
        self.additional_brcs = [v if isinstance(v, BRCEnum) else BRCEnum(v) for v in self.additional_brcs]

        if self.repository is not None and not isinstance(self.repository, RepositoryEnum):
            self.repository = RepositoryEnum(self.repository)

        if self.bibliographicCitation is not None and not isinstance(self.bibliographicCitation, URI):
            self.bibliographicCitation = URI(self.bibliographicCitation)

        if not isinstance(self.has_related_ids, list):
            self.has_related_ids = [self.has_related_ids] if self.has_related_ids is not None else []
        self.has_related_ids = [v if isinstance(v, URIorCURIE) else URIorCURIE(v) for v in self.has_related_ids]

        if not isinstance(self.species, list):
            self.species = [self.species] if self.species is not None else []
        self.species = [v if isinstance(v, Organism) else Organism(**as_dict(v)) for v in self.species]

        if not isinstance(self.plasmid_features, list):
            self.plasmid_features = [self.plasmid_features] if self.plasmid_features is not None else []
        self.plasmid_features = [v if isinstance(v, Plasmid) else Plasmid(**as_dict(v)) for v in self.plasmid_features]

        if self.analysisType is not None and not isinstance(self.analysisType, str):
            self.analysisType = str(self.analysisType)

        if self.datasetType is not None and not isinstance(self.datasetType, DatasetTypeCodes):
            self.datasetType = DatasetTypeCodes(self.datasetType)

        if self.description is not None and not isinstance(self.description, str):
            self.description = str(self.description)

        if not isinstance(self.relatedItem, list):
            self.relatedItem = [self.relatedItem] if self.relatedItem is not None else []
        self.relatedItem = [v if isinstance(v, RelatedItem) else RelatedItem(**as_dict(v)) for v in self.relatedItem]

        if not isinstance(self.keywords, list):
            self.keywords = [self.keywords] if self.keywords is not None else []
        self.keywords = [v if isinstance(v, str) else str(v) for v in self.keywords]

        if self.datasetName is not None and not isinstance(self.datasetName, str):
            self.datasetName = str(self.datasetName)

        if not isinstance(self.funding, list):
            self.funding = [self.funding] if self.funding is not None else []
        self.funding = [v if isinstance(v, Funding) else Funding(**as_dict(v)) for v in self.funding]

        if self.dataset_url is not None and not isinstance(self.dataset_url, URI):
            self.dataset_url = URI(self.dataset_url)

        super().__post_init__(**kwargs)


@dataclass(repr=False)
class Individual(YAMLRoot):
    """
    An individual involved in the dataset.
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = SCHEMA["Person"]
    class_class_curie: ClassVar[str] = "schema:Person"
    class_name: ClassVar[str] = "Individual"
    class_model_uri: ClassVar[URIRef] = BRC.Individual

    name: Optional[str] = None
    email: Optional[str] = None
    primaryContact: Optional[Union[bool, Bool]] = None
    affiliation: Optional[str] = None
    orcid: Optional[Union[str, URIorCURIE]] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.name is not None and not isinstance(self.name, str):
            self.name = str(self.name)

        if self.email is not None and not isinstance(self.email, str):
            self.email = str(self.email)

        if self.primaryContact is not None and not isinstance(self.primaryContact, Bool):
            self.primaryContact = Bool(self.primaryContact)

        if self.affiliation is not None and not isinstance(self.affiliation, str):
            self.affiliation = str(self.affiliation)

        if self.orcid is not None and not isinstance(self.orcid, URIorCURIE):
            self.orcid = URIorCURIE(self.orcid)

        super().__post_init__(**kwargs)


@dataclass(repr=False)
class Contributor(Individual):
    """
    An individual who contributed to the dataset in some manner, not necessarily as an author.
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = BRC["Contributor"]
    class_class_curie: ClassVar[str] = "brc:Contributor"
    class_name: ClassVar[str] = "Contributor"
    class_model_uri: ClassVar[URIRef] = BRC.Contributor

    contributorType: Optional[Union[str, "ContributorTypeCodes"]] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.contributorType is not None and not isinstance(self.contributorType, ContributorTypeCodes):
            self.contributorType = ContributorTypeCodes(self.contributorType)

        super().__post_init__(**kwargs)


@dataclass(repr=False)
class Funding(YAMLRoot):
    """
    Funding source for the dataset. Each item corresponds to a single award or grant.
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = BRC["Funding"]
    class_class_curie: ClassVar[str] = "brc:Funding"
    class_name: ClassVar[str] = "Funding"
    class_model_uri: ClassVar[URIRef] = BRC.Funding

    fundingOrganization: Optional[Union[dict, "Organization"]] = None
    awardNumber: Optional[str] = None
    awardTitle: Optional[str] = None
    awardURI: Optional[Union[str, URIorCURIE]] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.fundingOrganization is not None and not isinstance(self.fundingOrganization, Organization):
            self.fundingOrganization = Organization(**as_dict(self.fundingOrganization))

        if self.awardNumber is not None and not isinstance(self.awardNumber, str):
            self.awardNumber = str(self.awardNumber)

        if self.awardTitle is not None and not isinstance(self.awardTitle, str):
            self.awardTitle = str(self.awardTitle)

        if self.awardURI is not None and not isinstance(self.awardURI, URIorCURIE):
            self.awardURI = URIorCURIE(self.awardURI)

        super().__post_init__(**kwargs)


@dataclass(repr=False)
class Organization(YAMLRoot):
    """
    An organization involved in the dataset.
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = BRC["Organization"]
    class_class_curie: ClassVar[str] = "brc:Organization"
    class_name: ClassVar[str] = "Organization"
    class_model_uri: ClassVar[URIRef] = BRC.Organization

    organizationName: Optional[str] = None
    parentOrganization: Optional[Union[dict, "Organization"]] = None
    wikidata_id: Optional[Union[str, WikidataIdentifier]] = None
    ror_id: Optional[Union[str, RorIdentifier]] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.organizationName is not None and not isinstance(self.organizationName, str):
            self.organizationName = str(self.organizationName)

        if self.parentOrganization is not None and not isinstance(self.parentOrganization, Organization):
            self.parentOrganization = Organization(**as_dict(self.parentOrganization))

        if self.wikidata_id is not None and not isinstance(self.wikidata_id, WikidataIdentifier):
            self.wikidata_id = WikidataIdentifier(self.wikidata_id)

        if self.ror_id is not None and not isinstance(self.ror_id, RorIdentifier):
            self.ror_id = RorIdentifier(self.ror_id)

        super().__post_init__(**kwargs)


@dataclass(repr=False)
class Organism(YAMLRoot):
    """
    An organism studied in the dataset.
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = BRC["Organism"]
    class_class_curie: ClassVar[str] = "brc:Organism"
    class_name: ClassVar[str] = "Organism"
    class_model_uri: ClassVar[URIRef] = BRC.Organism

    scientificName: Optional[str] = None
    NCBITaxID: Optional[int] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.scientificName is not None and not isinstance(self.scientificName, str):
            self.scientificName = str(self.scientificName)

        if self.NCBITaxID is not None and not isinstance(self.NCBITaxID, int):
            self.NCBITaxID = int(self.NCBITaxID)

        super().__post_init__(**kwargs)


@dataclass(repr=False)
class Plasmid(YAMLRoot):
    """
    Description of plasmid or other molecular vector features.
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = BRC["Plasmid"]
    class_class_curie: ClassVar[str] = "brc:Plasmid"
    class_name: ClassVar[str] = "Plasmid"
    class_model_uri: ClassVar[URIRef] = BRC.Plasmid

    backbone: Optional[str] = None
    host: Optional[Union[dict, Organism]] = None
    ori: Optional[str] = None
    promoters: Optional[Union[str, List[str]]] = empty_list()
    replicates_in: Optional[Union[Union[dict, Organism], List[Union[dict, Organism]]]] = empty_list()
    selection_markers: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.backbone is not None and not isinstance(self.backbone, str):
            self.backbone = str(self.backbone)

        if self.host is not None and not isinstance(self.host, Organism):
            self.host = Organism(**as_dict(self.host))

        if self.ori is not None and not isinstance(self.ori, str):
            self.ori = str(self.ori)

        if not isinstance(self.promoters, list):
            self.promoters = [self.promoters] if self.promoters is not None else []
        self.promoters = [v if isinstance(v, str) else str(v) for v in self.promoters]

        if not isinstance(self.replicates_in, list):
            self.replicates_in = [self.replicates_in] if self.replicates_in is not None else []
        self.replicates_in = [v if isinstance(v, Organism) else Organism(**as_dict(v)) for v in self.replicates_in]

        if not isinstance(self.selection_markers, list):
            self.selection_markers = [self.selection_markers] if self.selection_markers is not None else []
        self.selection_markers = [v if isinstance(v, str) else str(v) for v in self.selection_markers]

        super().__post_init__(**kwargs)


@dataclass(repr=False)
class RelatedItem(YAMLRoot):
    """
    A related publication or item, including cited publications.
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = BRC["RelatedItem"]
    class_class_curie: ClassVar[str] = "brc:RelatedItem"
    class_name: ClassVar[str] = "RelatedItem"
    class_model_uri: ClassVar[URIRef] = BRC.RelatedItem

    title: Optional[str] = None
    relatedItemType: Optional[Union[str, "CitedItemType"]] = None
    relatedItemIdentifier: Optional[Union[str, URIorCURIE]] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.title is not None and not isinstance(self.title, str):
            self.title = str(self.title)

        if self.relatedItemType is not None and not isinstance(self.relatedItemType, CitedItemType):
            self.relatedItemType = CitedItemType(self.relatedItemType)

        if self.relatedItemIdentifier is not None and not isinstance(self.relatedItemIdentifier, URIorCURIE):
            self.relatedItemIdentifier = URIorCURIE(self.relatedItemIdentifier)

        super().__post_init__(**kwargs)


# Enumerations
class AnalysisType(EnumDefinitionImpl):
    """
    Type of analysis performed on the dataset.
    """
    affinity_purification = PermissibleValue(
        text="affinity_purification",
        meaning=MI["0004"])
    cross_linking = PermissibleValue(
        text="cross_linking",
        meaning=OBI["0000800"])
    image_analysis = PermissibleValue(
        text="image_analysis",
        meaning=NCIT["C17606"])
    Ms_imaging = PermissibleValue(text="Ms_imaging")
    shotgun_proteomics = PermissibleValue(
        text="shotgun_proteomics",
        meaning=ERO["0001660"])
    srm_mrm = PermissibleValue(text="srm_mrm")
    swath_ms = PermissibleValue(
        text="swath_ms",
        meaning=OBI["0002958"])

    _defn = EnumDefinition(
        name="AnalysisType",
        description="Type of analysis performed on the dataset.",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Expression profiling",
            PermissibleValue(
                text="Expression profiling",
                meaning=NCIT["C19771"]))
        setattr(cls, "Genomic - SNP calling",
            PermissibleValue(
                text="Genomic - SNP calling",
                meaning=NCIT["C188690"]))
        setattr(cls, "Targeted Locus (Loci)",
            PermissibleValue(
                text="Targeted Locus (Loci)",
                meaning=OBI["0001899"]))

class BRCEnum(EnumDefinitionImpl):
    """
    Bioenergy Research Center affiliation.
    """
    CABBI = PermissibleValue(
        text="CABBI",
        description="Center for Advanced Bioenergy and Bioproducts Innovation")
    CBI = PermissibleValue(
        text="CBI",
        description="Center for Bioenergy Innovation")
    GLBRC = PermissibleValue(
        text="GLBRC",
        description="Great Lakes Bioenergy Research Center")
    JBEI = PermissibleValue(
        text="JBEI",
        description="Joint BioEnergy Institute")

    _defn = EnumDefinition(
        name="BRCEnum",
        description="Bioenergy Research Center affiliation.",
    )

class CitedItemType(EnumDefinitionImpl):
    """
    Type of cited item, e.g., journal article.
    """
    JournalArticle = PermissibleValue(
        text="JournalArticle",
        description="Journal article",
        meaning=IAO["0000013"])
    Book = PermissibleValue(
        text="Book",
        description="Book",
        meaning=SCHEMA["book"])
    Dataset = PermissibleValue(
        text="Dataset",
        description="Dataset",
        meaning=SCHEMA["dataset"])
    Software = PermissibleValue(
        text="Software",
        description="Software",
        meaning=IAO["0000010"])
    Thesis = PermissibleValue(
        text="Thesis",
        description="Thesis",
        meaning=SCHEMA["thesis"])
    Patent = PermissibleValue(
        text="Patent",
        description="Patent",
        meaning=IAO["0000313"])
    Preprint = PermissibleValue(
        text="Preprint",
        description="Preprint",
        meaning=SCHEMA["Publication"])
    Presentation = PermissibleValue(
        text="Presentation",
        description="Presentation",
        meaning=SCHEMA["PresentationDigitalDocument"])
    Report = PermissibleValue(
        text="Report",
        description="Report",
        meaning=IAO["0000088"])
    Webpage = PermissibleValue(
        text="Webpage",
        description="Webpage",
        meaning=SCHEMA["WebPage"])
    WebApplication = PermissibleValue(
        text="WebApplication",
        description="Web application",
        meaning=SCHEMA["WebApplication"])

    _defn = EnumDefinition(
        name="CitedItemType",
        description="Type of cited item, e.g., journal article.",
    )

class ContributorTypeCodes(EnumDefinitionImpl):
    """
    The type of contribution. These values are based on the OSTI schema (ELINK 241.6).
    """
    ContactPerson = PermissibleValue(
        text="ContactPerson",
        description="""Person with knowledge of how to access, troubleshoot, or otherwise field issues related to the resource.""")
    DataCollector = PermissibleValue(
        text="DataCollector",
        description="""Person/institution responsible for finding or gathering data under the guidelines of the author(s) or Principal Investigator.""")
    DataCurator = PermissibleValue(
        text="DataCurator",
        description="""Person tasked with reviewing, enhancing, cleaning, or standardizing metadata and the associated data submitted.""")
    DataManager = PermissibleValue(
        text="DataManager",
        description="""Person (or organization with a staff of data managers, such as a data centre) responsible for maintaining the finished resource.""")
    Distributor = PermissibleValue(
        text="Distributor",
        description="""Institution tasked with responsibility to generate/disseminate copies of the resource in either electronic or print form.""")
    Editor = PermissibleValue(
        text="Editor",
        description="A person who oversees the details related to the publication format of the resource.")
    HostingInstitution = PermissibleValue(
        text="HostingInstitution",
        description="The organization allowing the resource to be available on the internet.")
    Producer = PermissibleValue(
        text="Producer",
        description="Typically a person or organization responsible for the artistry and form of a media product.")
    ProjectLeader = PermissibleValue(
        text="ProjectLeader",
        description="""Person officially designated as head of project team instrumental in the work necessary to development of the resource.""")
    ProjectManager = PermissibleValue(
        text="ProjectManager",
        description="""Person officially designated as manager of a project. Project may consist of one or many project teams and sub-teams.""")
    ProjectMember = PermissibleValue(
        text="ProjectMember",
        description="Person on the membership list of a designated project/project team.")
    RegistrationAgency = PermissibleValue(
        text="RegistrationAgency",
        description="""Institution officially appointed by a Registration Authority to handle specific tasks within a defined area of responsibility.""")
    RegistrationAuthority = PermissibleValue(
        text="RegistrationAuthority",
        description="""A standards-setting body from which Registration Agencies obtain official recognition and guidance.""")
    RelatedPerson = PermissibleValue(
        text="RelatedPerson",
        description="""Person with no specifically defined role in the development of the resource, but who is someone the author wishes to recognize.""")
    Researcher = PermissibleValue(
        text="Researcher",
        description="A person involved in analyzing data or the results of an experiment or formal study.")
    ResearchGroup = PermissibleValue(
        text="ResearchGroup",
        description="""Refers to a group of individuals with a lab, department, or division; the group has a particular, defined focus of activity.""")
    RightsHolder = PermissibleValue(
        text="RightsHolder",
        description="""Person or institution owning or managing property rights, including intellectual property rights over the resource.""")
    Sponsor = PermissibleValue(
        text="Sponsor",
        description="""Person or organization that issued a contract or under the auspices of which a work has been performed.""")
    Supervisor = PermissibleValue(
        text="Supervisor",
        description="""Designated administrator over one or more groups working to produce a resource or over one or more steps of development process.""")
    WorkPackageLeader = PermissibleValue(
        text="WorkPackageLeader",
        description="A Work Package is a recognized data product, not all of which is included in publication.")
    Other = PermissibleValue(
        text="Other",
        description="""Any person or institution making a significant contribution, but whose contribution does not \"fit\".""")

    _defn = EnumDefinition(
        name="ContributorTypeCodes",
        description="The type of contribution. These values are based on the OSTI schema (ELINK 241.6).",
    )

class DatasetTypeCodes(EnumDefinitionImpl):
    """
    High-level type of the main content of the dataset, following OSTI categories. See
    https://www.osti.gov/elink/F2416instruct.jsp
    """
    AS = PermissibleValue(
        text="AS",
        description="""Animations/Simulations - Animations and simulations resulting from runs of computer models or similar software.""")
    GD = PermissibleValue(
        text="GD",
        description="""Genome/Genetics Data - Information that is numeric or alpha-numeric in nature (such as gene sequences) or that is a specialized mix of text and non-text information conveying results of genetics/genome research.""")
    IM = PermissibleValue(
        text="IM",
        description="""Interactive Data Map(s) - A non-static interface and the GIS data and/or shape files that generate it.""")
    ND = PermissibleValue(
        text="ND",
        description="""Numeric Data - Data primarily expressed with numbers; other content is secondary and supporting.""")
    IP = PermissibleValue(
        text="IP",
        description="""Still Images or Photos - A collection of images or photographs that are produced by a scientific instrument or that convey scientific results of experiments. Scientific images that might constitute a dataset could be images of cells or molecules that are typically taken with electron microscopes, 3-D structures of proteins or nanomaterials, images captured during an accelerator run, images from astronomy, etc.""")
    FP = PermissibleValue(
        text="FP",
        description="""Figures/Plots - A dataset consisting mainly of data diagrams, graphs and charts, diagrams or schematic drawings.""")
    SM = PermissibleValue(
        text="SM",
        description="""Specialized Mix - This \"type\" may be used to indicate a dataset made up of content that doesn't fit into one of the other \"type\" categories. The content of a \"specialized mix\" dataset could have some of everything in this list, for example, but is clearly focused on data and does not have a \"format\", such as a technical report that is focused on data would.""")
    MM = PermissibleValue(
        text="MM",
        description="""Multimedia - An example of a multimedia dataset might be a video of an experiment in progress, where the camera monitors change over a number of hours.""")
    I = PermissibleValue(
        text="I",
        description="""Instrument - Use this option to relate datasets which derive from a specific DOE instrument at one of the laboratories or user facilities. This creates a central Instrument record with a DOI to link out to related datasets.""")

    _defn = EnumDefinition(
        name="DatasetTypeCodes",
        description="""High-level type of the main content of the dataset, following OSTI categories. See https://www.osti.gov/elink/F2416instruct.jsp""",
    )

class RepositoryEnum(EnumDefinitionImpl):
    """
    Repository where the dataset is stored.
    """
    AmeriFlux = PermissibleValue(
        text="AmeriFlux",
        description="AmeriFlux")
    Dryad = PermissibleValue(
        text="Dryad",
        description="Dryad",
        meaning=ROR["00x6h5n95"])
    FigShare = PermissibleValue(
        text="FigShare",
        description="FigShare",
        meaning=ROR["041mxqs23"])
    GenBank = PermissibleValue(
        text="GenBank",
        description="GenBank")
    GEO = PermissibleValue(
        text="GEO",
        description="Gene Expression Omnibus")
    GitHub = PermissibleValue(
        text="GitHub",
        description="GitHub")
    ICE = PermissibleValue(
        text="ICE",
        description="Inventory of Composable Elements")
    iProX = PermissibleValue(
        text="iProX",
        description="Integrated Proteome Resources")
    jPOST = PermissibleValue(
        text="jPOST",
        description="Japan ProteOme STandard Repository/Database")
    MassIVE = PermissibleValue(
        text="MassIVE",
        description="Mass Spectrometry Interactive Virtual Environment")
    OSTI = PermissibleValue(
        text="OSTI",
        description="Office of Scientific and Technical Information",
        meaning=ROR["031478740"])
    PanoramaPublic = PermissibleValue(
        text="PanoramaPublic",
        description="Panorama Public")
    PedtideAtlas = PermissibleValue(
        text="PedtideAtlas",
        description="PeptideAtlas")
    PRIDE = PermissibleValue(
        text="PRIDE",
        description="PRoteomics IDEntifications database")
    Zenodo = PermissibleValue(
        text="Zenodo",
        description="Zenodo")

    _defn = EnumDefinition(
        name="RepositoryEnum",
        description="Repository where the dataset is stored.",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Bio-Protocol",
            PermissibleValue(
                text="Bio-Protocol",
                description="Bio-Protocol",
                meaning=ROR["04pvg6f08"]))
        setattr(cls, "GLBRC Sustainability",
            PermissibleValue(
                text="GLBRC Sustainability",
                description="\"Great Lakes Bioenergy Research Center Sustainability Data Catalog\""))
        setattr(cls, "Iowa State University FigShare",
            PermissibleValue(
                text="Iowa State University FigShare",
                description="Iowa State University FigShare"))
        setattr(cls, "Illinois Data Bank",
            PermissibleValue(
                text="Illinois Data Bank",
                description="Illinois Data Bank"))
        setattr(cls, "JGI Gold",
            PermissibleValue(
                text="JGI Gold",
                description="Joint Genome Institute Genome OnLine Database"))
        setattr(cls, "Mendeley Data",
            PermissibleValue(
                text="Mendeley Data",
                description="Mendeley Data",
                meaning=ROR["01t2a8a42"]))
        setattr(cls, "NCBI BioProject",
            PermissibleValue(
                text="NCBI BioProject",
                description="National Center for Biotechnology Information BioProject"))
        setattr(cls, "NCBI SRA",
            PermissibleValue(
                text="NCBI SRA",
                description="\"National Center for Biotechnology Information Sequence Read Archive\""))
        setattr(cls, "ORNL DAAC",
            PermissibleValue(
                text="ORNL DAAC",
                description="\"Oak Ridge National Laboratory Distributed Active Archive Center\""))
        setattr(cls, "Protein Data Bank",
            PermissibleValue(
                text="Protein Data Bank",
                description="RCSB Protein Data Bank"))
        setattr(cls, "The Cambridge Crystallographic Data Centre",
            PermissibleValue(
                text="The Cambridge Crystallographic Data Centre",
                description="The Cambridge Crystallographic Data Centre",
                meaning=ROR["00zbfm828"]))

# Slots
class slots:
    pass

slots.datasetCollection__datasets = Slot(uri=BRC.datasets, name="datasetCollection__datasets", curie=BRC.curie('datasets'),
                   model_uri=BRC.datasetCollection__datasets, domain=None, range=Optional[Union[Union[dict, Dataset], List[Union[dict, Dataset]]]])

slots.dataset__id = Slot(uri=SCHEMA.identifier, name="dataset__id", curie=SCHEMA.curie('identifier'),
                   model_uri=BRC.dataset__id, domain=None, range=Optional[Union[str, URIorCURIE]])

slots.dataset__title = Slot(uri=DCTERMS.title, name="dataset__title", curie=DCTERMS.curie('title'),
                   model_uri=BRC.dataset__title, domain=None, range=str)

slots.dataset__date = Slot(uri=DCTERMS.date, name="dataset__date", curie=DCTERMS.curie('date'),
                   model_uri=BRC.dataset__date, domain=None, range=Union[str, XSDDate])

slots.dataset__creator = Slot(uri=DCTERMS.creator, name="dataset__creator", curie=DCTERMS.curie('creator'),
                   model_uri=BRC.dataset__creator, domain=None, range=Union[Union[dict, Individual], List[Union[dict, Individual]]])

slots.dataset__contributors = Slot(uri=BRC.contributors, name="dataset__contributors", curie=BRC.curie('contributors'),
                   model_uri=BRC.dataset__contributors, domain=None, range=Optional[Union[Union[dict, Contributor], List[Union[dict, Contributor]]]])

slots.dataset__brc = Slot(uri=PROV.wasAttributedTo, name="dataset__brc", curie=PROV.curie('wasAttributedTo'),
                   model_uri=BRC.dataset__brc, domain=None, range=Union[str, "BRCEnum"])

slots.dataset__additional_brcs = Slot(uri=PROV.wasAttributedTo, name="dataset__additional_brcs", curie=PROV.curie('wasAttributedTo'),
                   model_uri=BRC.dataset__additional_brcs, domain=None, range=Optional[Union[Union[str, "BRCEnum"], List[Union[str, "BRCEnum"]]]])

slots.dataset__repository = Slot(uri=BRC.repository, name="dataset__repository", curie=BRC.curie('repository'),
                   model_uri=BRC.dataset__repository, domain=None, range=Optional[Union[str, "RepositoryEnum"]])

slots.dataset__bibliographicCitation = Slot(uri=DCTERMS.bibliographicCitation, name="dataset__bibliographicCitation", curie=DCTERMS.curie('bibliographicCitation'),
                   model_uri=BRC.dataset__bibliographicCitation, domain=None, range=Optional[Union[str, URI]])

slots.dataset__identifier = Slot(uri=SCHEMA.identifier, name="dataset__identifier", curie=SCHEMA.curie('identifier'),
                   model_uri=BRC.dataset__identifier, domain=None, range=str)

slots.dataset__has_related_ids = Slot(uri=BRC.has_related_ids, name="dataset__has_related_ids", curie=BRC.curie('has_related_ids'),
                   model_uri=BRC.dataset__has_related_ids, domain=None, range=Optional[Union[Union[str, URIorCURIE], List[Union[str, URIorCURIE]]]])

slots.dataset__species = Slot(uri=BRC.species, name="dataset__species", curie=BRC.curie('species'),
                   model_uri=BRC.dataset__species, domain=None, range=Optional[Union[Union[dict, Organism], List[Union[dict, Organism]]]])

slots.dataset__plasmid_features = Slot(uri=BRC.plasmid_features, name="dataset__plasmid_features", curie=BRC.curie('plasmid_features'),
                   model_uri=BRC.dataset__plasmid_features, domain=None, range=Optional[Union[Union[dict, Plasmid], List[Union[dict, Plasmid]]]])

slots.dataset__analysisType = Slot(uri=BRC.analysisType, name="dataset__analysisType", curie=BRC.curie('analysisType'),
                   model_uri=BRC.dataset__analysisType, domain=None, range=Optional[str])

slots.dataset__datasetType = Slot(uri=BRC.datasetType, name="dataset__datasetType", curie=BRC.curie('datasetType'),
                   model_uri=BRC.dataset__datasetType, domain=None, range=Optional[Union[str, "DatasetTypeCodes"]])

slots.dataset__description = Slot(uri=DCTERMS.description, name="dataset__description", curie=DCTERMS.curie('description'),
                   model_uri=BRC.dataset__description, domain=None, range=Optional[str])

slots.dataset__relatedItem = Slot(uri=BRC.relatedItem, name="dataset__relatedItem", curie=BRC.curie('relatedItem'),
                   model_uri=BRC.dataset__relatedItem, domain=None, range=Optional[Union[Union[dict, RelatedItem], List[Union[dict, RelatedItem]]]])

slots.dataset__keywords = Slot(uri=DCAT.keyword, name="dataset__keywords", curie=DCAT.curie('keyword'),
                   model_uri=BRC.dataset__keywords, domain=None, range=Optional[Union[str, List[str]]])

slots.dataset__datasetName = Slot(uri=BRC.datasetName, name="dataset__datasetName", curie=BRC.curie('datasetName'),
                   model_uri=BRC.dataset__datasetName, domain=None, range=Optional[str])

slots.dataset__funding = Slot(uri=BRC.funding, name="dataset__funding", curie=BRC.curie('funding'),
                   model_uri=BRC.dataset__funding, domain=None, range=Optional[Union[Union[dict, Funding], List[Union[dict, Funding]]]])

slots.dataset__dataset_url = Slot(uri=SCHEMA.url, name="dataset__dataset_url", curie=SCHEMA.curie('url'),
                   model_uri=BRC.dataset__dataset_url, domain=None, range=Optional[Union[str, URI]])

slots.individual__name = Slot(uri=SCHEMA.name, name="individual__name", curie=SCHEMA.curie('name'),
                   model_uri=BRC.individual__name, domain=None, range=Optional[str])

slots.individual__email = Slot(uri=SCHEMA.email, name="individual__email", curie=SCHEMA.curie('email'),
                   model_uri=BRC.individual__email, domain=None, range=Optional[str])

slots.individual__primaryContact = Slot(uri=BRC.primaryContact, name="individual__primaryContact", curie=BRC.curie('primaryContact'),
                   model_uri=BRC.individual__primaryContact, domain=None, range=Optional[Union[bool, Bool]])

slots.individual__affiliation = Slot(uri=BRC.affiliation, name="individual__affiliation", curie=BRC.curie('affiliation'),
                   model_uri=BRC.individual__affiliation, domain=None, range=Optional[str])

slots.individual__orcid = Slot(uri=BRC.orcid, name="individual__orcid", curie=BRC.curie('orcid'),
                   model_uri=BRC.individual__orcid, domain=None, range=Optional[Union[str, URIorCURIE]])

slots.contributor__contributorType = Slot(uri=BRC.contributorType, name="contributor__contributorType", curie=BRC.curie('contributorType'),
                   model_uri=BRC.contributor__contributorType, domain=None, range=Optional[Union[str, "ContributorTypeCodes"]])

slots.funding__fundingOrganization = Slot(uri=BRC.fundingOrganization, name="funding__fundingOrganization", curie=BRC.curie('fundingOrganization'),
                   model_uri=BRC.funding__fundingOrganization, domain=None, range=Optional[Union[dict, Organization]])

slots.funding__awardNumber = Slot(uri=BRC.awardNumber, name="funding__awardNumber", curie=BRC.curie('awardNumber'),
                   model_uri=BRC.funding__awardNumber, domain=None, range=Optional[str])

slots.funding__awardTitle = Slot(uri=BRC.awardTitle, name="funding__awardTitle", curie=BRC.curie('awardTitle'),
                   model_uri=BRC.funding__awardTitle, domain=None, range=Optional[str])

slots.funding__awardURI = Slot(uri=BRC.awardURI, name="funding__awardURI", curie=BRC.curie('awardURI'),
                   model_uri=BRC.funding__awardURI, domain=None, range=Optional[Union[str, URIorCURIE]])

slots.organization__organizationName = Slot(uri=SCHEMA.name, name="organization__organizationName", curie=SCHEMA.curie('name'),
                   model_uri=BRC.organization__organizationName, domain=None, range=Optional[str])

slots.organization__parentOrganization = Slot(uri=BRC.parentOrganization, name="organization__parentOrganization", curie=BRC.curie('parentOrganization'),
                   model_uri=BRC.organization__parentOrganization, domain=None, range=Optional[Union[dict, Organization]])

slots.organization__wikidata_id = Slot(uri=BRC.wikidata_id, name="organization__wikidata_id", curie=BRC.curie('wikidata_id'),
                   model_uri=BRC.organization__wikidata_id, domain=None, range=Optional[Union[str, WikidataIdentifier]])

slots.organization__ror_id = Slot(uri=BRC.ror_id, name="organization__ror_id", curie=BRC.curie('ror_id'),
                   model_uri=BRC.organization__ror_id, domain=None, range=Optional[Union[str, RorIdentifier]])

slots.organism__scientificName = Slot(uri=BRC.scientificName, name="organism__scientificName", curie=BRC.curie('scientificName'),
                   model_uri=BRC.organism__scientificName, domain=None, range=Optional[str])

slots.organism__NCBITaxID = Slot(uri=BRC.NCBITaxID, name="organism__NCBITaxID", curie=BRC.curie('NCBITaxID'),
                   model_uri=BRC.organism__NCBITaxID, domain=None, range=Optional[int])

slots.plasmid__backbone = Slot(uri=BRC.backbone, name="plasmid__backbone", curie=BRC.curie('backbone'),
                   model_uri=BRC.plasmid__backbone, domain=None, range=Optional[str])

slots.plasmid__host = Slot(uri=BRC.host, name="plasmid__host", curie=BRC.curie('host'),
                   model_uri=BRC.plasmid__host, domain=None, range=Optional[Union[dict, Organism]])

slots.plasmid__ori = Slot(uri=BRC.ori, name="plasmid__ori", curie=BRC.curie('ori'),
                   model_uri=BRC.plasmid__ori, domain=None, range=Optional[str])

slots.plasmid__promoters = Slot(uri=BRC.promoters, name="plasmid__promoters", curie=BRC.curie('promoters'),
                   model_uri=BRC.plasmid__promoters, domain=None, range=Optional[Union[str, List[str]]])

slots.plasmid__replicates_in = Slot(uri=BRC.replicates_in, name="plasmid__replicates_in", curie=BRC.curie('replicates_in'),
                   model_uri=BRC.plasmid__replicates_in, domain=None, range=Optional[Union[Union[dict, Organism], List[Union[dict, Organism]]]])

slots.plasmid__selection_markers = Slot(uri=BRC.selection_markers, name="plasmid__selection_markers", curie=BRC.curie('selection_markers'),
                   model_uri=BRC.plasmid__selection_markers, domain=None, range=Optional[Union[str, List[str]]])

slots.relatedItem__title = Slot(uri=DCTERMS.title, name="relatedItem__title", curie=DCTERMS.curie('title'),
                   model_uri=BRC.relatedItem__title, domain=None, range=Optional[str])

slots.relatedItem__relatedItemType = Slot(uri=BRC.relatedItemType, name="relatedItem__relatedItemType", curie=BRC.curie('relatedItemType'),
                   model_uri=BRC.relatedItem__relatedItemType, domain=None, range=Optional[Union[str, "CitedItemType"]])

slots.relatedItem__relatedItemIdentifier = Slot(uri=BRC.relatedItemIdentifier, name="relatedItem__relatedItemIdentifier", curie=BRC.curie('relatedItemIdentifier'),
                   model_uri=BRC.relatedItem__relatedItemIdentifier, domain=None, range=Optional[Union[str, URIorCURIE]])